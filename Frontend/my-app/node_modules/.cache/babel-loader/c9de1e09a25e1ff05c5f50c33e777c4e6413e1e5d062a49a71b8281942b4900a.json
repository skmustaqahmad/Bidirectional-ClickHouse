{"ast":null,"code":"var _jsxFileName = \"F:\\\\Mustaq\\\\Bidirectional ClickHouse\\\\Frontend\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport SourceSelection from './components/SourceSelection';\nimport ClickHouseSourceForm from './components/ClickHouseSourceForm';\nimport FlatFileSourceForm from './components/FlatFileSourceForm';\nimport ColumnSelection from './components/ColumnSelection';\nimport TargetSelection from './components/TargetSelection';\nimport ClickHouseTargetForm from './components/ClickHouseTargetForm';\nimport FlatFileTargetForm from './components/FlatFileTargetForm';\nimport StatusDisplay from './components/StatusDisplay';\nimport MultiTableJoin from './components/MultiTableJoin';\nimport DataPreview from './components/DataPreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [source, setSource] = useState('');\n  const [target, setTarget] = useState('');\n  const [sourceConfig, setSourceConfig] = useState({});\n  const [targetConfig, setTargetConfig] = useState({});\n  const [tables, setTables] = useState([]);\n  const [selectedTable, setSelectedTable] = useState('');\n  const [columns, setColumns] = useState([]);\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [previewData, setPreviewData] = useState(null);\n  const [filePath, setFilePath] = useState('');\n  const [joinMode, setJoinMode] = useState(false);\n  const [joinTables, setJoinTables] = useState([]);\n  const [joinConditions, setJoinConditions] = useState([]);\n  const handleSourceSelect = selectedSource => {\n    setSource(selectedSource);\n    setTables([]);\n    setSelectedTable('');\n    setColumns([]);\n    setSelectedColumns([]);\n    setStatus('idle');\n    setResult(null);\n    setError(null);\n    setPreviewData(null);\n    setJoinMode(false);\n  };\n  const handleTargetSelect = selectedTarget => {\n    setTarget(selectedTarget);\n    setStatus('idle');\n    setResult(null);\n    setError(null);\n  };\n  const handleClickHouseConnect = async config => {\n    try {\n      setStatus('connecting');\n      setSourceConfig(config);\n      const response = await fetch('http://localhost:5000/api/clickhouse/tables', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(config)\n      });\n      const data = await response.json();\n      if (data.success) {\n        setTables(data.tables.map(t => t.name));\n        setStatus('connected');\n      } else {\n        setError(data.message || 'Failed to connect to ClickHouse');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n  const handleTableSelect = async table => {\n    try {\n      setSelectedTable(table);\n      setStatus('fetching');\n      const response = await fetch('http://localhost:5000/api/clickhouse/columns', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...sourceConfig,\n          tableName: table\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setColumns(data.columns.map(col => ({\n          name: col.name,\n          type: col.type\n        })));\n        setStatus('columns_loaded');\n      } else {\n        setError(data.message || 'Failed to fetch columns');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n  const handleFileSelect = async fileConfig => {\n    try {\n      setStatus('processing_file');\n      setSourceConfig(fileConfig);\n      const formData = new FormData();\n      formData.append('file', fileConfig.file);\n      formData.append('delimiter', fileConfig.delimiter);\n      const response = await fetch('http://localhost:5000/api/file/schema', {\n        method: 'POST',\n        body: formData\n      });\n      const data = await response.json();\n      if (data.success) {\n        setColumns(data.columns.map(col => ({\n          name: col,\n          type: 'String'\n        })));\n        setFilePath(data.filePath);\n        setStatus('columns_loaded');\n      } else {\n        setError(data.message || 'Failed to process file');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n  const handlePreview = async () => {\n    try {\n      if (selectedColumns.length === 0) {\n        setError('Please select at least one column');\n        return;\n      }\n      setStatus('previewing');\n      let response;\n      if (source === 'clickhouse') {\n        if (joinMode) {\n          response = await fetch('http://localhost:5000/api/clickhouse/join-preview', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tables: joinTables,\n              joinConditions,\n              selectedColumns\n            })\n          });\n        } else {\n          response = await fetch('http://localhost:5000/api/clickhouse/preview', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tableName: selectedTable,\n              selectedColumns\n            })\n          });\n        }\n      } else {\n        // For flat file, we already have the sample data from schema detection\n        // This is a simplified approach; in a real app, you'd create an endpoint to preview file data\n        setPreviewData({\n          data: [{\n            message: 'File preview is shown during schema detection'\n          }]\n        });\n        setStatus('preview_complete');\n        return;\n      }\n      const data = await response.json();\n      if (data.success) {\n        setPreviewData(data);\n        setStatus('preview_complete');\n      } else {\n        setError(data.message || 'Failed to preview data');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n  const handleStartIngestion = async () => {\n    try {\n      if (selectedColumns.length === 0) {\n        setError('Please select at least one column');\n        return;\n      }\n      if (!target) {\n        setError('Please select a target');\n        return;\n      }\n      setStatus('ingesting');\n      setResult(null);\n      let response;\n      if (source === 'clickhouse' && target === 'flatfile') {\n        // ClickHouse to Flat File\n        if (joinMode) {\n          response = await fetch('http://localhost:5000/api/ingest/join-to-file', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tables: joinTables,\n              joinConditions,\n              selectedColumns,\n              fileName: targetConfig.fileName,\n              delimiter: targetConfig.delimiter\n            })\n          });\n        } else {\n          response = await fetch('http://localhost:5000/api/ingest/clickhouse-to-file', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tableName: selectedTable,\n              selectedColumns,\n              fileName: targetConfig.fileName,\n              delimiter: targetConfig.delimiter\n            })\n          });\n        }\n      } else if (source === 'flatfile' && target === 'clickhouse') {\n        // Flat File to ClickHouse\n        response = await fetch('http://localhost:5000/api/ingest/file-to-clickhouse', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            ...targetConfig,\n            filePath,\n            selectedColumns,\n            delimiter: sourceConfig.delimiter\n          })\n        });\n      } else {\n        setError('Invalid source/target combination');\n        setStatus('error');\n        return;\n      }\n      const data = await response.json();\n      if (data.success) {\n        setResult(data);\n        setStatus('completed');\n      } else {\n        setError(data.message || 'Ingestion failed');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n  const toggleJoinMode = () => {\n    setJoinMode(!joinMode);\n    if (!joinMode) {\n      setJoinTables([selectedTable]);\n    } else {\n      setJoinTables([]);\n      setJoinConditions([]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ClickHouse & Flat File Data Ingestion Tool\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"configuration-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Source Configuration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SourceSelection, {\n          onSelect: handleSourceSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), source === 'clickhouse' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clickhouse-source\",\n          children: [/*#__PURE__*/_jsxDEV(ClickHouseSourceForm, {\n            onConnect: handleClickHouseConnect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this), tables.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"table-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Select Table\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: selectedTable,\n              onChange: e => handleTableSelect(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"-- Select Table --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 21\n              }, this), tables.map(table => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: table,\n                children: table\n              }, table, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 19\n            }, this), source === 'clickhouse' && status === 'columns_loaded' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"join-option\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: toggleJoinMode,\n                className: joinMode ? 'active' : '',\n                children: joinMode ? 'Disable Multi-Table Join' : 'Enable Multi-Table Join'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 328,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 21\n            }, this), joinMode && /*#__PURE__*/_jsxDEV(MultiTableJoin, {\n              tables: tables,\n              joinTables: joinTables,\n              setJoinTables: setJoinTables,\n              joinConditions: joinConditions,\n              setJoinConditions: setJoinConditions,\n              sourceConfig: sourceConfig,\n              setColumns: setColumns,\n              setStatus: setStatus,\n              setError: setError\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this), source === 'flatfile' && /*#__PURE__*/_jsxDEV(FlatFileSourceForm, {\n          onFileSelect: handleFileSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(ColumnSelection, {\n          columns: columns,\n          selectedColumns: selectedColumns,\n          setSelectedColumns: setSelectedColumns\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), status === 'columns_loaded' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-section\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handlePreview,\n            className: \"preview-button\",\n            children: \"Preview Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 13\n        }, this), previewData && /*#__PURE__*/_jsxDEV(DataPreview, {\n          data: previewData.data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), columns.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"target-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Target Configuration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TargetSelection, {\n          source: source,\n          onSelect: handleTargetSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 13\n        }, this), target === 'clickhouse' && /*#__PURE__*/_jsxDEV(ClickHouseTargetForm, {\n          onConfigChange: setTargetConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 15\n        }, this), target === 'flatfile' && /*#__PURE__*/_jsxDEV(FlatFileTargetForm, {\n          onConfigChange: setTargetConfig\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 15\n        }, this), target && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingestion-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleStartIngestion,\n            disabled: status === 'ingesting',\n            className: \"start-ingestion-button\",\n            children: \"Start Ingestion\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(StatusDisplay, {\n        status: status,\n        error: error,\n        result: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R0i//kVerdpMlZFtPscNNfy+QmE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SourceSelection","ClickHouseSourceForm","FlatFileSourceForm","ColumnSelection","TargetSelection","ClickHouseTargetForm","FlatFileTargetForm","StatusDisplay","MultiTableJoin","DataPreview","jsxDEV","_jsxDEV","App","_s","source","setSource","target","setTarget","sourceConfig","setSourceConfig","targetConfig","setTargetConfig","tables","setTables","selectedTable","setSelectedTable","columns","setColumns","selectedColumns","setSelectedColumns","status","setStatus","result","setResult","error","setError","previewData","setPreviewData","filePath","setFilePath","joinMode","setJoinMode","joinTables","setJoinTables","joinConditions","setJoinConditions","handleSourceSelect","selectedSource","handleTargetSelect","selectedTarget","handleClickHouseConnect","config","response","fetch","method","headers","body","JSON","stringify","data","json","success","map","t","name","message","err","handleTableSelect","table","tableName","col","type","handleFileSelect","fileConfig","formData","FormData","append","file","delimiter","handlePreview","length","handleStartIngestion","fileName","toggleJoinMode","className","children","_jsxFileName","lineNumber","columnNumber","onSelect","onConnect","value","onChange","e","onClick","onFileSelect","onConfigChange","disabled","_c","$RefreshReg$"],"sources":["F:/Mustaq/Bidirectional ClickHouse/Frontend/my-app/src/App.js"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport './App.css';\nimport SourceSelection from './components/SourceSelection';\nimport ClickHouseSourceForm from './components/ClickHouseSourceForm';\nimport FlatFileSourceForm from './components/FlatFileSourceForm';\nimport ColumnSelection from './components/ColumnSelection';\nimport TargetSelection from './components/TargetSelection';\nimport ClickHouseTargetForm from './components/ClickHouseTargetForm';\nimport FlatFileTargetForm from './components/FlatFileTargetForm';\nimport StatusDisplay from './components/StatusDisplay';\nimport MultiTableJoin from './components/MultiTableJoin';\nimport DataPreview from './components/DataPreview';\n\nfunction App() {\n  const [source, setSource] = useState('');\n  const [target, setTarget] = useState('');\n  const [sourceConfig, setSourceConfig] = useState({});\n  const [targetConfig, setTargetConfig] = useState({});\n  const [tables, setTables] = useState([]);\n  const [selectedTable, setSelectedTable] = useState('');\n  const [columns, setColumns] = useState([]);\n  const [selectedColumns, setSelectedColumns] = useState([]);\n  const [status, setStatus] = useState('idle');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const [previewData, setPreviewData] = useState(null);\n  const [filePath, setFilePath] = useState('');\n  const [joinMode, setJoinMode] = useState(false);\n  const [joinTables, setJoinTables] = useState([]);\n  const [joinConditions, setJoinConditions] = useState([]);\n\n  const handleSourceSelect = (selectedSource) => {\n    setSource(selectedSource);\n    setTables([]);\n    setSelectedTable('');\n    setColumns([]);\n    setSelectedColumns([]);\n    setStatus('idle');\n    setResult(null);\n    setError(null);\n    setPreviewData(null);\n    setJoinMode(false);\n  };\n\n  const handleTargetSelect = (selectedTarget) => {\n    setTarget(selectedTarget);\n    setStatus('idle');\n    setResult(null);\n    setError(null);\n  };\n\n  const handleClickHouseConnect = async (config) => {\n    try {\n      setStatus('connecting');\n      setSourceConfig(config);\n\n      const response = await fetch('http://localhost:5000/api/clickhouse/tables', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(config),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setTables(data.tables.map(t => t.name));\n        setStatus('connected');\n      } else {\n        setError(data.message || 'Failed to connect to ClickHouse');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n\n  const handleTableSelect = async (table) => {\n    try {\n      setSelectedTable(table);\n      setStatus('fetching');\n\n      const response = await fetch('http://localhost:5000/api/clickhouse/columns', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...sourceConfig,\n          tableName: table\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setColumns(data.columns.map(col => ({ name: col.name, type: col.type })));\n        setStatus('columns_loaded');\n      } else {\n        setError(data.message || 'Failed to fetch columns');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n\n  const handleFileSelect = async (fileConfig) => {\n    try {\n      setStatus('processing_file');\n      setSourceConfig(fileConfig);\n\n      const formData = new FormData();\n      formData.append('file', fileConfig.file);\n      formData.append('delimiter', fileConfig.delimiter);\n\n      const response = await fetch('http://localhost:5000/api/file/schema', {\n        method: 'POST',\n        body: formData,\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        setColumns(data.columns.map(col => ({ name: col, type: 'String' })));\n        setFilePath(data.filePath);\n        setStatus('columns_loaded');\n      } else {\n        setError(data.message || 'Failed to process file');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n\n  const handlePreview = async () => {\n    try {\n      if (selectedColumns.length === 0) {\n        setError('Please select at least one column');\n        return;\n      }\n\n      setStatus('previewing');\n\n      let response;\n      if (source === 'clickhouse') {\n        if (joinMode) {\n          response = await fetch('http://localhost:5000/api/clickhouse/join-preview', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tables: joinTables,\n              joinConditions,\n              selectedColumns\n            }),\n          });\n        } else {\n          response = await fetch('http://localhost:5000/api/clickhouse/preview', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tableName: selectedTable,\n              selectedColumns\n            }),\n          });\n        }\n      } else {\n        // For flat file, we already have the sample data from schema detection\n        // This is a simplified approach; in a real app, you'd create an endpoint to preview file data\n        setPreviewData({\n          data: [{ message: 'File preview is shown during schema detection' }]\n        });\n        setStatus('preview_complete');\n        return;\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        setPreviewData(data);\n        setStatus('preview_complete');\n      } else {\n        setError(data.message || 'Failed to preview data');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n\n  const handleStartIngestion = async () => {\n    try {\n      if (selectedColumns.length === 0) {\n        setError('Please select at least one column');\n        return;\n      }\n\n      if (!target) {\n        setError('Please select a target');\n        return;\n      }\n\n      setStatus('ingesting');\n      setResult(null);\n\n      let response;\n\n      if (source === 'clickhouse' && target === 'flatfile') {\n        // ClickHouse to Flat File\n        if (joinMode) {\n          response = await fetch('http://localhost:5000/api/ingest/join-to-file', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tables: joinTables,\n              joinConditions,\n              selectedColumns,\n              fileName: targetConfig.fileName,\n              delimiter: targetConfig.delimiter\n            }),\n          });\n        } else {\n          response = await fetch('http://localhost:5000/api/ingest/clickhouse-to-file', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              ...sourceConfig,\n              tableName: selectedTable,\n              selectedColumns,\n              fileName: targetConfig.fileName,\n              delimiter: targetConfig.delimiter\n            }),\n          });\n        }\n      } else if (source === 'flatfile' && target === 'clickhouse') {\n        // Flat File to ClickHouse\n        response = await fetch('http://localhost:5000/api/ingest/file-to-clickhouse', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            ...targetConfig,\n            filePath,\n            selectedColumns,\n            delimiter: sourceConfig.delimiter\n          }),\n        });\n      } else {\n        setError('Invalid source/target combination');\n        setStatus('error');\n        return;\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        setResult(data);\n        setStatus('completed');\n      } else {\n        setError(data.message || 'Ingestion failed');\n        setStatus('error');\n      }\n    } catch (err) {\n      setError(err.message || 'An error occurred');\n      setStatus('error');\n    }\n  };\n\n  const toggleJoinMode = () => {\n    setJoinMode(!joinMode);\n    if (!joinMode) {\n      setJoinTables([selectedTable]);\n    } else {\n      setJoinTables([]);\n      setJoinConditions([]);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ClickHouse & Flat File Data Ingestion Tool</h1>\n      </header>\n      \n      <main className=\"App-main\">\n        <div className=\"configuration-container\">\n          <h2>Source Configuration</h2>\n          <SourceSelection onSelect={handleSourceSelect} />\n          \n          {source === 'clickhouse' && (\n            <div className=\"clickhouse-source\">\n              <ClickHouseSourceForm onConnect={handleClickHouseConnect} />\n              \n              {tables.length > 0 && (\n                <div className=\"table-selector\">\n                  <h3>Select Table</h3>\n                  <select \n                    value={selectedTable} \n                    onChange={(e) => handleTableSelect(e.target.value)}\n                  >\n                    <option value=\"\">-- Select Table --</option>\n                    {tables.map(table => (\n                      <option key={table} value={table}>{table}</option>\n                    ))}\n                  </select>\n                  \n                  {source === 'clickhouse' && status === 'columns_loaded' && (\n                    <div className=\"join-option\">\n                      <button \n                        onClick={toggleJoinMode}\n                        className={joinMode ? 'active' : ''}\n                      >\n                        {joinMode ? 'Disable Multi-Table Join' : 'Enable Multi-Table Join'}\n                      </button>\n                    </div>\n                  )}\n                  \n                  {joinMode && (\n                    <MultiTableJoin \n                      tables={tables}\n                      joinTables={joinTables}\n                      setJoinTables={setJoinTables}\n                      joinConditions={joinConditions}\n                      setJoinConditions={setJoinConditions}\n                      sourceConfig={sourceConfig}\n                      setColumns={setColumns}\n                      setStatus={setStatus}\n                      setError={setError}\n                    />\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n          \n          {source === 'flatfile' && (\n            <FlatFileSourceForm onFileSelect={handleFileSelect} />\n          )}\n          \n          {columns.length > 0 && (\n            <ColumnSelection \n              columns={columns} \n              selectedColumns={selectedColumns}\n              setSelectedColumns={setSelectedColumns}\n            />\n          )}\n          \n          {status === 'columns_loaded' && (\n            <div className=\"preview-section\">\n              <button onClick={handlePreview} className=\"preview-button\">\n                Preview Data\n              </button>\n            </div>\n          )}\n          \n          {previewData && (\n            <DataPreview data={previewData.data} />\n          )}\n        </div>\n        \n        {columns.length > 0 && (\n          <div className=\"target-container\">\n            <h2>Target Configuration</h2>\n            <TargetSelection \n              source={source} \n              onSelect={handleTargetSelect} \n            />\n            \n            {target === 'clickhouse' && (\n              <ClickHouseTargetForm \n                onConfigChange={setTargetConfig} \n              />\n            )}\n            \n            {target === 'flatfile' && (\n              <FlatFileTargetForm \n                onConfigChange={setTargetConfig} \n              />\n            )}\n            \n            {target && (\n              <div className=\"ingestion-controls\">\n                <button \n                  onClick={handleStartIngestion}\n                  disabled={status === 'ingesting'}\n                  className=\"start-ingestion-button\"\n                >\n                  Start Ingestion\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n        \n        <StatusDisplay \n          status={status} \n          error={error} \n          result={result} \n        />\n      </main>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}